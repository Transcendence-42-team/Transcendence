# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: Int!
  token: String!
  is_connecting: Boolean!
  tfa_code: String
  email: String!
  intra_login: String!
  nickname: String!
  avatar: String
}

type Chanel {
  id: Int!
  owner_id: Int!
  chanel_name: String
  chanel_size: Float
  max_users: Float
  messages: [Message!]!
}

type Message {
  id: Int!
  content: String!
  sent_at: DateTime!
  sender_id: Int!
  sender: User!
  channel_id: Int
  channel: Chanel
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Contact {
  id: Int!
  user_id: Int!
  contact_id: Int!
  pending: Boolean!
  contact(user_id: Int!): User!
}

type Player {
  id: Int!
  userId: Int!
  positionX: Float!
  positionY: Float!
  waitingRoomId: Int!
  opponentPlayerId: Int!
  ballId: Float
}

type Ball {
  id: Int!
  positionX: Float!
  positionY: Float!
  directionX: Float!
  directionY: Float!
}

type WaitingRoom {
  id: Int!
  waitingList: [Player!]
}

type Pong {
  id: Int!
  userId1: Int!
  userId2: Int!
  scoreUser1: Int!
  scoreUser2: Int!
  loser_id: Int!
  winner_id: Int!
  versusDate: DateTime!
}

type Query {
  findAllUsers: [User!]!
  findUserById(id: Int!): User!
  searchUsers(research: String!, user_id: Int!): [User!]!
  Channel_findOne(id: Int!): Chanel!
  chanels(user_id: Int!): [Chanel!]!
  Message_findAll_msg: [Message!]!
  Message_findAll_msg_chan(channelId: Int!): [Message!]!
  Message_findOne_msg(id: Int!): Message!
  contactsRequest(user_id: Int!): [Contact!]!
  myContactRequest(user_id: Int!): [Contact!]!
  myContacts(user_id: Int!): [Contact!]!
  makeAuthentication(code: String!): User!
  checkTwoAuthenticationFactor(code: String!): User!
  Pongs: [Pong!]!
  Pong(id: Int!): Pong!
  Players: [Player!]!
  findPlayer(id: Int!): Player!
  findWaitingRoomPlayer(id: Int!): [Player!]!
  findWaitingRooms: [WaitingRoom!]!
  findWaitingRoom(id: Int!): WaitingRoom!
  Ball: [Ball!]!
  Balls(id: Int!): Ball!
}

type Mutation {
  sendTwoFactorCodeByEmail(email: String!, code: String!): Boolean!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: Int!): User!
  createChanel(createChanelInput: CreateChanelInput!): Chanel!
  Channel_update(updateChanelInput: UpdateChanelInput!): Chanel!
  removeChanel(id: Int!): Chanel!
  createMessage(createMsgInput: CreateMessageInput!): Message!
  updateMessage(updateMsgInput: UpdateMessageInput!): Message!
  deleteMessage: Message!
  createContact(createContact: CreateContactInput!): Contact!
  replyAddContact(reply: UpdateContact!): Contact!
  deleteContact(id: Int!): Contact!
  createUser(createAuthenticationInput: CreateAuthenticationInput!): User!
  createPong(createPongInput: CreatePongInput!): [Player!]!
  updatePong(updatePongInput: UpdatePongInput!): Pong!
  removePong(id: Int!): Pong!
  removePlayer(id: Int!): Player!
  createPlayer(createPlayerInput: CreatePlayerInput!): Player!
  updatePlayer(updatePlayerInput: UpdatePlayerInput!): Player!
  createWaitingRoom: WaitingRoom!
  removeWaitingRoom(id: Int!): WaitingRoom!
  createBall: Ball!
  removeBall(id: Int!): Ball!
  updateBall(updateBallInput: UpdateBallInput!): Ball!
}

input UpdateUserInput {
  id: Int!
  token: String
  is_connecting: Boolean
  tfa_code: String
  email: String
  intra_login: String
  nickname: String
  avatar: String
}

input CreateChanelInput {
  owner_id: Int
  chanel_name: String
  chanel_size: Int
  max_users: Int
  logo: String
}

input UpdateChanelInput {
  id: Int!
  chanel_name: String
  chanel_size: Float
  max_users: Float
}

input CreateMessageInput {
  content: String!
  sent_at: DateTime
  sender_id: Int!
  channel_id: Int
}

input UpdateMessageInput {
  content: String
  sent_at: DateTime
  sender_id: Int
  channel_id: Int
  id: Int!
}

input CreateContactInput {
  user_id: Int!
  contact_id: Int!
  pending: Boolean
}

input UpdateContact {
  user_id: Int
  contact_id: Int
  pending: Boolean!
  id: Int!
}

input CreateAuthenticationInput {
  nickname: String!
  avatar: String
}

input CreatePongInput {
  userId1: Int!
  userId2: Int!
  playerId1: Int!
  playerId2: Int!
}

input UpdatePongInput {
  userId1: Int
  userId2: Int
  playerId1: Int
  playerId2: Int
  id: Int!
  scoreUser1: Int!
  scoreUser2: Int!
  loser_id: Int!
  winner_id: Int!
}

input CreatePlayerInput {
  userId: Int!
  positionY: Float!
  positionX: Float!
  waitingRoomId: Int!
}

input UpdatePlayerInput {
  id: Int!
  userId: Int!
  positionX: Float!
  positionY: Float!
  waitingRoomId: Int!
  opponentPlayerId: Int!
  ballId: Float
}

input UpdateBallInput {
  id: Int!
  positionX: Float!
  positionY: Float!
  directionX: Float!
  directionY: Float!
}

type Subscription {
  addmessage(channel_id: Int!): Message!
  listPlayerSubscription: [Player!]!
  playerUpdatedSubscription(id: Int!): Player!
  ballUpdatedSubscription(id: Int!): Ball!
}