// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
	id					Int         @id @default(autoincrement())
	token				String?		@unique
	state				Int
	tfa_code			String?
	email				String		@unique
	intra_login			String		@unique
	nickname			String		@unique
	avatar				String?
	rank				String		@default("Bronze")
	level 				Float 		@default(1)
	userPong			Pong[]		@relation("User1")
	userPong2			Pong[]		@relation("User2")
	chanels				Users_Chanels[]
	own_chan			Chanel[]		@relation("Owner")
	contact				Contact[]		@relation("contactRef")
	reverse_contact		Contact[]		@relation("reverseContactRef")
	sender				Message[]       @relation("Send")
	blocked				ToBloc[]		@relation("Blocked")
	user_ban			user_banned[]		@relation("User_ban")

}

model Contact {
	id					Int			@default(autoincrement())@id
	user_id				Int				
	contact_id			Int				
	pending				Boolean?	@default(true)
	contact				User		@relation("contactRef", fields: [user_id], references: [id])
	user				User		@relation("reverseContactRef", fields: [contact_id], references: [id])
	@@unique([user_id, contact_id])
}


model Chanel {
	id					Int			@id @default(autoincrement())
	owner_id			Int
	chanel_name			String
	chanel_size			Int
	max_users			Int
	logo				String?
	private				Boolean		@default(true)
	owner				User		@relation("Owner", fields: [owner_id], references: [id])
	users				Users_Chanels[]
	messages			Message[]	@relation("ChanelMessages")
	interlocutor_id		Int?
	directMsg			Boolean		@default(false)
	AdminList			Int[]		@default([]) // Liste des ID des administrateurs
}

model user_banned{
	id					Int			@id @default(autoincrement())
	user_id				Int
	channel_id			Int
	user_ban			User		@relation("User_ban", fields: [user_id], references: [id])
}

model Users_Chanels {

	user_id				Int
	chanel_id			Int
	pending				Boolean?	@default(true)
	is_muted			Boolean?	@default(false)
	is_admin			Boolean?	@default(false)
	user				User		@relation(fields: [user_id], references: [id])
	chanel				Chanel		@relation(fields: [chanel_id], references: [id])
	mute_start_time		Int			@default(0)
	@@id([user_id, chanel_id])
}

model Pong {
  id           			Int      	@id @default(autoincrement())
  userId1      			Int
  userId2      			Int
  scoreUser1   			Int?		@default(0)
  scoreUser2   			Int?		@default(0)
  loserId     			Int?
  winnerId    			Int?
  versusDate  			DateTime 	@default(now())

  user1        			User     	@relation("User1", fields: [userId1], references: [id])
  user2        			User     	@relation("User2", fields: [userId2], references: [id])
  
}

model Player {
  id            	Int 			@id @default(autoincrement())
  userId        	Int 			@unique
  positionX     	Float			@default(10)
  positionY     	Float			@default(50)
  host				Boolean?		@default(false)
  opponentPlayerId	Int				@default(0)
  waitingRoomId 	Int
  ballId 			Int ?
  pongId			Int?
  positionBall		Ball? 			@relation("Ball", fields: [ballId], references: [id])
  waitingRoom   	WaitingRoom? 	@relation("PlayerWaitingList", fields: [waitingRoomId], references: [id])
}

model WaitingRoom {
	id            Int 				@id @default(autoincrement()) 
	waitingList   Player[] 			@relation("PlayerWaitingList")
}


model Ball {
  id					Int      	@id @default(autoincrement())
  positionX        		Float 		@default(50)
  positionY        		Float 		@default(50)
  directionX         	Float 		@default(-20)
  directionY         	Float 		@default(10)
  players				Player[] 	@relation("Ball")
}

model ToBloc{
	id					Int			@id @default(autoincrement())
	blocker_id			Int
	blocked_id			Int
	blocked				User		@relation("Blocked", fields: [blocked_id], references: [id])
}

model Message {
  id					Int      	@id @default(autoincrement())
  sender_id				Int
  channel_id			Int?
  content				String
  sent_at				DateTime 	@default(now())
  sender				User     	@relation("Send", fields: [sender_id], references: [id])
  channel				Chanel?  	@relation("ChanelMessages", fields: [channel_id], references: [id])
}