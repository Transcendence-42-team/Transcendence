// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
	id					Int             @id @default(autoincrement())
	token				String?         @unique
	is_connecting		Boolean?		@default(true)
	tfa_code			String?
	email				String          @unique
	intra_login			String			@unique
	nickname			String          @unique
	avatar				String?
	userPong			Pong[]          @relation("User1")
	userPong2			Pong[]          @relation("User2")
	chanels				Users_Chanels[]
	own_chan			Chanel[]
	contact				Contact[]		@relation("contactRef")
	reverse_contact		Contact[]		@relation("reverseContactRef")
	sender				Message[]       @relation("Send")
}

model Contact {
	id					Int				@default(autoincrement())@id
	user_id				Int				
	contact_id			Int				
	pending				Boolean?		@default(true)
	contact				User			@relation("contactRef", fields: [user_id], references: [id])
	user				User			@relation("reverseContactRef", fields: [contact_id], references: [id])
	@@unique([user_id, contact_id])
}


model Chanel {
	id					Int			@id @default(autoincrement())
	owner_id			Int
	chanel_name			String
	chanel_size			Int
	max_users			Int
	logo				String?
	owner				User		@relation(fields: [owner_id], references: [id])
	users				Users_Chanels[]
	messages			Message[]	@relation("ChanelMessages")
}

model Users_Chanels {
	user_id				Int
	chanel_id			Int
	pending				Boolean?	@default(true)
					
	user				User		@relation(fields: [user_id], references: [id])
	chanel				Chanel		@relation(fields: [chanel_id], references: [id])

	@@id([user_id, chanel_id])
}

model Pong {
	id					Int			@id @default(autoincrement())
	userId1				Int
	userId2				Int
	scoreUser1			Int
	scoreUser2			Int
	loser_id				Int
	winner_id			Int
	Versus_date			DateTime	@default(now())
	user1				User		@relation("User1", fields: [userId1], references: [id])
	user2				User		@relation("User2", fields: [userId2], references: [id])
}

model PositionPlayer {
  id				Int      @id @default(autoincrement())
  playerId          Int
  positionX        Float
  positionY        Float
  width             Float
  height            Float
}

model PositionBall {
  id				Int      @id @default(autoincrement())
  PongId            Int
  positionX        Int
  positionY        Int
  velocityX         Float
  velocityY         Float
}

model Message {
  id				Int      @id @default(autoincrement())
  sender_id			Int
  channel_id		Int?
  content			String
  sent_at			DateTime @default(now())
  sender			User     @relation("Send", fields: [sender_id], references: [id])
  channel			Chanel?  @relation("ChanelMessages", fields: [channel_id], references: [id])
}